"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"This field does not require authentication"
directive @unauthenticated on FIELD_DEFINITION

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type ApiKey {
  accountId: UUID!
  createdAt: DateTime!
  description: String
  id: UUID!
  secret: String
}

type AuthenticatedUser {
  jwt: String!
}

type Entity {
  facetLog(facets: [String!]!): [FacetLog!]! @unauthenticated
  facets: [Facet!]!
  id: UUID!
  projectId: UUID!
  timeSeries(facet: String!): FacetTimeSeries @unauthenticated
  type: String!
  typeName: String!
  urn: String!
}

type EntityType {
  id: UUID!
  isRootType: Boolean!
  name: String!
  uri: String!
}

type Facet {
  metaType: String!
  name: String!
  uri: String!
  value: Json
  version: Long!
}

type FacetLog {
  createdAt: DateTime!
  entities: [Entity!]!
  id: UUID!
  name: String!
  urn: String!
  version: Long!
}

type FacetTimeSeries {
  name: String!
  points: [FacetTimeSeriesPoint!]!
  urn: String!
}

type FacetTimeSeriesPoint {
  timestamp: DateTime!
  value: Float!
}

type FacetType {
  id: UUID!
  indexTimeSeries: Boolean!
  isRootType: Boolean!
  jsonSchema: Json
  metaType: String!
  name: String!
  uri: String!
}

type Mutation {
  createApiKey: ApiKey!
  createUser(email: String!, password: String!): UUID! @unauthenticated
  login(email: String!, password: String!): AuthenticatedUser! @unauthenticated
}

type Project {
  id: UUID!
  name: String!
  slug: String!
}

type Query {
  apiKeys: [ApiKey!]!
  entity(id: UUID!): Entity @unauthenticated
  entityGraph(d: Int!, id: UUID!): [Entity!]! @unauthenticated
  entityTypes(project: String!): [EntityType!]! @unauthenticated
  facetTypes(project: String!): [FacetType!]! @unauthenticated
  me: User
  projects: [Project!]! @unauthenticated
  search(filters: [FilterInput!]!, project: String!): [Entity!]! @unauthenticated
}

type User {
  email: String!
  firstName: String
  lastName: String
}

"DataTime scalar"
scalar DateTime

"A JSON blob"
scalar Json

"Long type"
scalar Long

"UUID"
scalar UUID

input FilterInput {
  uri: String!
  value: [String!]!
}
